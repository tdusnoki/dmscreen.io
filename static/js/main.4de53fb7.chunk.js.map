{"version":3,"sources":["Input.js","utils.js","Card.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["label","type","value","onChange","randomId","Math","floor","random","id","name","initiative","hitpoints","onNameChange","onInitiativeChange","onHitpointsChange","onRemove","className","Input","e","onClick","target","initialState","App","props","state","elements","updateName","bind","updateInitiative","updateHitpoints","addCard","removeElement","this","index","findIndex","el","setState","Number","clearTimeout","timeout_","setTimeout","sortElements","sort","l","r","length","filter","map","element","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4de53fb7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default ({\r\n  label,\r\n  type,\r\n  value,\r\n  onChange,\r\n}) =>\r\n  <label>\r\n    {label}:\r\n    <input type={type} value={value} onChange={onChange} />\r\n  </label>\r\n","export const randomId = () =>\r\n  Math.floor(Math.random() * 100000);\r\n\r\nexport const rollD20 = () =>\r\n  Math.floor(Math.random() * 20) + 1;\r\n","import React, { Component } from 'react';\r\nimport Input from './Input';\r\nimport { rollD20 } from './utils';\r\n\r\nexport default ({\r\n  id,\r\n  name,\r\n  initiative,\r\n  hitpoints,\r\n  onNameChange,\r\n  onInitiativeChange,\r\n  onHitpointsChange,\r\n  onRemove,\r\n}) =>\r\n  <div className=\"card\">\r\n    <Input\r\n      label=\"Name\"\r\n      type=\"text\"\r\n      value={name}\r\n      onChange={e => onNameChange(id, e)}\r\n    />\r\n\r\n    <Input\r\n      label=\"Initiative\"\r\n      type=\"number\"\r\n      value={initiative}\r\n      onChange={e => onInitiativeChange(id, e)}\r\n    />\r\n\r\n    <button\r\n      onClick={() => onInitiativeChange(id, { target: { value: rollD20() } } )}\r\n    >\r\n      roll d20\r\n    </button>\r\n\r\n    <Input\r\n      label=\"Hitpoints\"\r\n      type=\"number\"\r\n      value={hitpoints}\r\n      onChange={e => onHitpointsChange(id, e)}\r\n    />\r\n\r\n    <button onClick={() => onRemove(id)}>X</button>\r\n  </div>;\r\n  ","import { randomId } from './utils';\r\n\r\nexport const initialState = [{\r\n  id: randomId(),\r\n  name: 'Player 1',\r\n  initiative: 20,\r\n  hitpoints: 10,\r\n}, {\r\n  id: randomId(),\r\n  name: 'Player 2',\r\n  initiative: 19,\r\n  hitpoints: 16,\r\n}, {\r\n  id: randomId(),\r\n  name: 'Player 3',\r\n  initiative: 18,\r\n  hitpoints: 20,\r\n}, {\r\n  id: randomId(),\r\n  name: 'Player 4',\r\n  initiative: 17,\r\n  hitpoints: 32,\r\n}];\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './Card';\nimport { randomId } from './utils';\nimport { initialState } from './constants';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elements: initialState,\n    };\n    this.updateName = this.updateName.bind(this);\n    this.updateInitiative = this.updateInitiative.bind(this);\n    this.updateHitpoints = this.updateHitpoints.bind(this);\n    this.addCard = this.addCard.bind(this);\n    this.removeElement = this.removeElement.bind(this);\n  }\n\n  updateName(id, e) {\n    const { value } = e.target;\n    const elements = this.state.elements;\n    const index = elements.findIndex(el => el.id === id);\n    elements[index].name = value;\n    this.setState({ elements });\n  }\n\n  updateHitpoints(id, e) {\n    const { value } = e.target;\n    const elements = this.state.elements;\n    const index = elements.findIndex(el => el.id === id);\n    elements[index].hitpoints = Number(value);\n    this.setState({ elements });\n  }\n\n  updateInitiative(id, e) {\n    clearTimeout(this.timeout_);\n    const { value } = e.target;\n    const elements = this.state.elements;\n    const index = elements.findIndex(el => el.id === id);\n    elements[index].initiative = Number(value);\n    this.setState({ elements });\n    this.timeout_ = setTimeout(() => this.sortElements(), 500);\n  }\n\n  sortElements() {\n    const { elements } = this.state;\n    this.setState({\n      elements: elements.sort((l, r) => r.initiative - l.initiative)\n    });\n  }\n\n  addCard() {\n    const { elements } = this.state;\n    elements[elements.length] = {\n      id: randomId(),\n      name: `Player ${elements.length + 1}`,\n      initiative: -100,\n      hitpoints: 12,\n    };\n    this.setState({\n      elements: elements.sort((l, r) => r.initiative - l.initiative)\n    });\n  }\n\n  removeElement(id) {\n    let { elements } = this.state;\n    elements = elements.filter(el => el.id !== id);\n    this.setState({ elements });\n  }\n  render() {\n    const { elements } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p1>DM SCREEN</p1>\n          <div>\n            <button className=\"add\" onClick={this.addCard}>Add New Card</button>\n            {elements.map(element =>\n              <Card\n                key={element.id}\n                name={element.name}\n                initiative={element.initiative}\n                hitpoints={element.hitpoints}\n                id={element.id}\n                onNameChange={this.updateName}\n                onInitiativeChange={this.updateInitiative}\n                onHitpointsChange={this.updateHitpoints}\n                onRemove={this.removeElement}\n              />\n            )}\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}